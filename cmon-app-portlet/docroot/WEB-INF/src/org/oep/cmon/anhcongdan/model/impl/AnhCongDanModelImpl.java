/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.oep.cmon.anhcongdan.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.oep.cmon.anhcongdan.model.AnhCongDan;
import org.oep.cmon.anhcongdan.model.AnhCongDanModel;

import java.io.Serializable;

import java.sql.Types;

/**
 * The base model implementation for the AnhCongDan service. Represents a row in the &quot;CMON_VIEW_CONGDAN&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.oep.cmon.anhcongdan.model.AnhCongDanModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AnhCongDanImpl}.
 * </p>
 *
 * @author BinhNT
 * @see AnhCongDanImpl
 * @see org.oep.cmon.anhcongdan.model.AnhCongDan
 * @see org.oep.cmon.anhcongdan.model.AnhCongDanModel
 * @generated
 */
public class AnhCongDanModelImpl extends BaseModelImpl<AnhCongDan>
	implements AnhCongDanModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a anh cong dan model instance should use the {@link org.oep.cmon.anhcongdan.model.AnhCongDan} interface instead.
	 */
	public static final String TABLE_NAME = "CMON_VIEW_CONGDAN";
	public static final Object[][] TABLE_COLUMNS = {
			{ "ID", Types.BIGINT },
			{ "MA", Types.VARCHAR },
			{ "EMAIL", Types.VARCHAR },
			{ "ANH", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table CMON_VIEW_CONGDAN (ID LONG not null primary key,MA VARCHAR(75) null,EMAIL VARCHAR(75) null,ANH VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table CMON_VIEW_CONGDAN";
	public static final String ORDER_BY_JPQL = " ORDER BY anhCongDan.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY CMON_VIEW_CONGDAN.ID ASC";
	public static final String DATA_SOURCE = "cmonDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.oep.cmon.anhcongdan.model.AnhCongDan"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.oep.cmon.anhcongdan.model.AnhCongDan"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.oep.cmon.anhcongdan.model.AnhCongDan"),
			true);
	public static long EMAIL_COLUMN_BITMASK = 1L;
	public static long MA_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.oep.cmon.anhcongdan.model.AnhCongDan"));

	public AnhCongDanModelImpl() {
	}

	public long getPrimaryKey() {
		return _id;
	}

	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_id);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return AnhCongDan.class;
	}

	public String getModelClassName() {
		return AnhCongDan.class.getName();
	}

	public long getId() {
		return _id;
	}

	public void setId(long id) {
		_columnBitmask = -1L;

		_id = id;
	}

	public String getMa() {
		if (_ma == null) {
			return StringPool.BLANK;
		}
		else {
			return _ma;
		}
	}

	public void setMa(String ma) {
		_columnBitmask |= MA_COLUMN_BITMASK;

		if (_originalMa == null) {
			_originalMa = _ma;
		}

		_ma = ma;
	}

	public String getOriginalMa() {
		return GetterUtil.getString(_originalMa);
	}

	public String getEmail() {
		if (_email == null) {
			return StringPool.BLANK;
		}
		else {
			return _email;
		}
	}

	public void setEmail(String email) {
		_columnBitmask |= EMAIL_COLUMN_BITMASK;

		if (_originalEmail == null) {
			_originalEmail = _email;
		}

		_email = email;
	}

	public String getOriginalEmail() {
		return GetterUtil.getString(_originalEmail);
	}

	public String getAnh() {
		if (_anh == null) {
			return StringPool.BLANK;
		}
		else {
			return _anh;
		}
	}

	public void setAnh(String anh) {
		_anh = anh;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public AnhCongDan toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (AnhCongDan)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(0,
					AnhCongDan.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	@Override
	public Object clone() {
		AnhCongDanImpl anhCongDanImpl = new AnhCongDanImpl();

		anhCongDanImpl.setId(getId());
		anhCongDanImpl.setMa(getMa());
		anhCongDanImpl.setEmail(getEmail());
		anhCongDanImpl.setAnh(getAnh());

		anhCongDanImpl.resetOriginalValues();

		return anhCongDanImpl;
	}

	public int compareTo(AnhCongDan anhCongDan) {
		int value = 0;

		if (getId() < anhCongDan.getId()) {
			value = -1;
		}
		else if (getId() > anhCongDan.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		AnhCongDan anhCongDan = null;

		try {
			anhCongDan = (AnhCongDan)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = anhCongDan.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		AnhCongDanModelImpl anhCongDanModelImpl = this;

		anhCongDanModelImpl._originalMa = anhCongDanModelImpl._ma;

		anhCongDanModelImpl._originalEmail = anhCongDanModelImpl._email;

		anhCongDanModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<AnhCongDan> toCacheModel() {
		AnhCongDanCacheModel anhCongDanCacheModel = new AnhCongDanCacheModel();

		anhCongDanCacheModel.id = getId();

		anhCongDanCacheModel.ma = getMa();

		String ma = anhCongDanCacheModel.ma;

		if ((ma != null) && (ma.length() == 0)) {
			anhCongDanCacheModel.ma = null;
		}

		anhCongDanCacheModel.email = getEmail();

		String email = anhCongDanCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			anhCongDanCacheModel.email = null;
		}

		anhCongDanCacheModel.anh = getAnh();

		String anh = anhCongDanCacheModel.anh;

		if ((anh != null) && (anh.length() == 0)) {
			anhCongDanCacheModel.anh = null;
		}

		return anhCongDanCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", ma=");
		sb.append(getMa());
		sb.append(", email=");
		sb.append(getEmail());
		sb.append(", anh=");
		sb.append(getAnh());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("org.oep.cmon.anhcongdan.model.AnhCongDan");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ma</column-name><column-value><![CDATA[");
		sb.append(getMa());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>email</column-name><column-value><![CDATA[");
		sb.append(getEmail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>anh</column-name><column-value><![CDATA[");
		sb.append(getAnh());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = AnhCongDan.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			AnhCongDan.class
		};
	private long _id;
	private String _ma;
	private String _originalMa;
	private String _email;
	private String _originalEmail;
	private String _anh;
	private transient ExpandoBridge _expandoBridge;
	private long _columnBitmask;
	private AnhCongDan _escapedModelProxy;
}