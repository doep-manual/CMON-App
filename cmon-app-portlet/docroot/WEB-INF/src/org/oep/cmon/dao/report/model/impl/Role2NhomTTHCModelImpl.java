/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.oep.cmon.dao.report.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.oep.cmon.dao.report.model.Role2NhomTTHC;
import org.oep.cmon.dao.report.model.Role2NhomTTHCModel;

import java.io.Serializable;

import java.sql.Types;

/**
 * The base model implementation for the Role2NhomTTHC service. Represents a row in the &quot;CMON_RPROLE2NHOMTTHC&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.oep.cmon.dao.report.model.Role2NhomTTHCModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link Role2NhomTTHCImpl}.
 * </p>
 *
 * @author VIENPN
 * @see Role2NhomTTHCImpl
 * @see org.oep.cmon.dao.report.model.Role2NhomTTHC
 * @see org.oep.cmon.dao.report.model.Role2NhomTTHCModel
 * @generated
 */
public class Role2NhomTTHCModelImpl extends BaseModelImpl<Role2NhomTTHC>
	implements Role2NhomTTHCModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a role2 nhom t t h c model instance should use the {@link org.oep.cmon.dao.report.model.Role2NhomTTHC} interface instead.
	 */
	public static final String TABLE_NAME = "CMON_RPROLE2NHOMTTHC";
	public static final Object[][] TABLE_COLUMNS = {
			{ "ID", Types.BIGINT },
			{ "RPDANHMUCROLEID", Types.BIGINT },
			{ "BAOCAOID", Types.BIGINT },
			{ "NHOMTHUTUCHANHCHINHID", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table CMON_RPROLE2NHOMTTHC (ID LONG not null primary key,RPDANHMUCROLEID LONG,BAOCAOID LONG,NHOMTHUTUCHANHCHINHID LONG)";
	public static final String TABLE_SQL_DROP = "drop table CMON_RPROLE2NHOMTTHC";
	public static final String ORDER_BY_JPQL = " ORDER BY role2NhomTTHC.ID DESC";
	public static final String ORDER_BY_SQL = " ORDER BY CMON_RPROLE2NHOMTTHC.ID DESC";
	public static final String DATA_SOURCE = "egovDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.oep.cmon.dao.report.model.Role2NhomTTHC"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.oep.cmon.dao.report.model.Role2NhomTTHC"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.oep.cmon.dao.report.model.Role2NhomTTHC"));

	public Role2NhomTTHCModelImpl() {
	}

	public long getPrimaryKey() {
		return _ID;
	}

	public void setPrimaryKey(long primaryKey) {
		setID(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_ID);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return Role2NhomTTHC.class;
	}

	public String getModelClassName() {
		return Role2NhomTTHC.class.getName();
	}

	public long getID() {
		return _ID;
	}

	public void setID(long ID) {
		_ID = ID;
	}

	public long getRPDANHMUCROLEID() {
		return _RPDANHMUCROLEID;
	}

	public void setRPDANHMUCROLEID(long RPDANHMUCROLEID) {
		_RPDANHMUCROLEID = RPDANHMUCROLEID;
	}

	public long getRPDANHMUCBAOCAOID() {
		return _RPDANHMUCBAOCAOID;
	}

	public void setRPDANHMUCBAOCAOID(long RPDANHMUCBAOCAOID) {
		_RPDANHMUCBAOCAOID = RPDANHMUCBAOCAOID;
	}

	public long getNHOMTHUTUCHANHCHINHID() {
		return _NHOMTHUTUCHANHCHINHID;
	}

	public void setNHOMTHUTUCHANHCHINHID(long NHOMTHUTUCHANHCHINHID) {
		_NHOMTHUTUCHANHCHINHID = NHOMTHUTUCHANHCHINHID;
	}

	@Override
	public Role2NhomTTHC toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (Role2NhomTTHC)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(0,
					Role2NhomTTHC.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	@Override
	public Object clone() {
		Role2NhomTTHCImpl role2NhomTTHCImpl = new Role2NhomTTHCImpl();

		role2NhomTTHCImpl.setID(getID());
		role2NhomTTHCImpl.setRPDANHMUCROLEID(getRPDANHMUCROLEID());
		role2NhomTTHCImpl.setRPDANHMUCBAOCAOID(getRPDANHMUCBAOCAOID());
		role2NhomTTHCImpl.setNHOMTHUTUCHANHCHINHID(getNHOMTHUTUCHANHCHINHID());

		role2NhomTTHCImpl.resetOriginalValues();

		return role2NhomTTHCImpl;
	}

	public int compareTo(Role2NhomTTHC role2NhomTTHC) {
		int value = 0;

		if (getID() < role2NhomTTHC.getID()) {
			value = -1;
		}
		else if (getID() > role2NhomTTHC.getID()) {
			value = 1;
		}
		else {
			value = 0;
		}

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		Role2NhomTTHC role2NhomTTHC = null;

		try {
			role2NhomTTHC = (Role2NhomTTHC)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = role2NhomTTHC.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Role2NhomTTHC> toCacheModel() {
		Role2NhomTTHCCacheModel role2NhomTTHCCacheModel = new Role2NhomTTHCCacheModel();

		role2NhomTTHCCacheModel.ID = getID();

		role2NhomTTHCCacheModel.RPDANHMUCROLEID = getRPDANHMUCROLEID();

		role2NhomTTHCCacheModel.RPDANHMUCBAOCAOID = getRPDANHMUCBAOCAOID();

		role2NhomTTHCCacheModel.NHOMTHUTUCHANHCHINHID = getNHOMTHUTUCHANHCHINHID();

		return role2NhomTTHCCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{ID=");
		sb.append(getID());
		sb.append(", RPDANHMUCROLEID=");
		sb.append(getRPDANHMUCROLEID());
		sb.append(", RPDANHMUCBAOCAOID=");
		sb.append(getRPDANHMUCBAOCAOID());
		sb.append(", NHOMTHUTUCHANHCHINHID=");
		sb.append(getNHOMTHUTUCHANHCHINHID());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("org.oep.cmon.dao.report.model.Role2NhomTTHC");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>ID</column-name><column-value><![CDATA[");
		sb.append(getID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>RPDANHMUCROLEID</column-name><column-value><![CDATA[");
		sb.append(getRPDANHMUCROLEID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>RPDANHMUCBAOCAOID</column-name><column-value><![CDATA[");
		sb.append(getRPDANHMUCBAOCAOID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>NHOMTHUTUCHANHCHINHID</column-name><column-value><![CDATA[");
		sb.append(getNHOMTHUTUCHANHCHINHID());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Role2NhomTTHC.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			Role2NhomTTHC.class
		};
	private long _ID;
	private long _RPDANHMUCROLEID;
	private long _RPDANHMUCBAOCAOID;
	private long _NHOMTHUTUCHANHCHINHID;
	private transient ExpandoBridge _expandoBridge;
	private Role2NhomTTHC _escapedModelProxy;
}