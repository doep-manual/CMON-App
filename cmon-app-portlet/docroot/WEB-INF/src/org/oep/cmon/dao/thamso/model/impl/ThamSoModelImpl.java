/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.oep.cmon.dao.thamso.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.oep.cmon.dao.thamso.model.ThamSo;
import org.oep.cmon.dao.thamso.model.ThamSoModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;

/**
 * The base model implementation for the ThamSo service. Represents a row in the &quot;CMON_THAMSO&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.oep.cmon.dao.thamso.model.ThamSoModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ThamSoImpl}.
 * </p>
 *
 * @author LIEMNN
 * @see ThamSoImpl
 * @see org.oep.cmon.dao.thamso.model.ThamSo
 * @see org.oep.cmon.dao.thamso.model.ThamSoModel
 * @generated
 */
public class ThamSoModelImpl extends BaseModelImpl<ThamSo>
	implements ThamSoModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a tham so model instance should use the {@link org.oep.cmon.dao.thamso.model.ThamSo} interface instead.
	 */
	public static final String TABLE_NAME = "CMON_THAMSO";
	public static final Object[][] TABLE_COLUMNS = {
			{ "ID", Types.BIGINT },
			{ "TEN", Types.VARCHAR },
			{ "GIATRI", Types.VARCHAR },
			{ "KIEUDULIEU", Types.INTEGER },
			{ "MOTA", Types.VARCHAR },
			{ "UNGDUNGID", Types.BIGINT },
			{ "HETHONGID", Types.BIGINT },
			{ "NGAYTAO", Types.TIMESTAMP },
			{ "NGUOITAO", Types.VARCHAR },
			{ "NGAYSUA", Types.TIMESTAMP },
			{ "NGUOISUA", Types.VARCHAR },
			{ "DAXOA", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table CMON_THAMSO (ID LONG not null primary key,TEN VARCHAR(75) null,GIATRI VARCHAR(75) null,KIEUDULIEU INTEGER,MOTA VARCHAR(75) null,UNGDUNGID LONG null,HETHONGID LONG null,NGAYTAO DATE null,NGUOITAO VARCHAR(75) null,NGAYSUA DATE null,NGUOISUA VARCHAR(75) null,DAXOA INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table CMON_THAMSO";
	public static final String ORDER_BY_JPQL = " ORDER BY thamSo.Ten ASC";
	public static final String ORDER_BY_SQL = " ORDER BY CMON_THAMSO.TEN ASC";
	public static final String DATA_SOURCE = "egovDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.oep.cmon.dao.thamso.model.ThamSo"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.oep.cmon.dao.thamso.model.ThamSo"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.oep.cmon.dao.thamso.model.ThamSo"),
			true);
	public static long DAXOA_COLUMN_BITMASK = 1L;
	public static long TEN_COLUMN_BITMASK = 2L;
	public static long GIATRI_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.oep.cmon.dao.thamso.model.ThamSo"));

	public ThamSoModelImpl() {
	}

	public long getPrimaryKey() {
		return _Id;
	}

	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_Id);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return ThamSo.class;
	}

	public String getModelClassName() {
		return ThamSo.class.getName();
	}

	public long getId() {
		return _Id;
	}

	public void setId(long Id) {
		_Id = Id;
	}

	public String getTen() {
		if (_Ten == null) {
			return StringPool.BLANK;
		}
		else {
			return _Ten;
		}
	}

	public void setTen(String Ten) {
		_columnBitmask = -1L;

		if (_originalTen == null) {
			_originalTen = _Ten;
		}

		_Ten = Ten;
	}

	public String getOriginalTen() {
		return GetterUtil.getString(_originalTen);
	}

	public String getGiaTri() {
		if (_giaTri == null) {
			return StringPool.BLANK;
		}
		else {
			return _giaTri;
		}
	}

	public void setGiaTri(String giaTri) {
		_columnBitmask |= GIATRI_COLUMN_BITMASK;

		if (_originalGiaTri == null) {
			_originalGiaTri = _giaTri;
		}

		_giaTri = giaTri;
	}

	public String getOriginalGiaTri() {
		return GetterUtil.getString(_originalGiaTri);
	}

	public int getKieuDuLieu() {
		return _kieuDuLieu;
	}

	public void setKieuDuLieu(int kieuDuLieu) {
		_kieuDuLieu = kieuDuLieu;
	}

	public String getMota() {
		if (_Mota == null) {
			return StringPool.BLANK;
		}
		else {
			return _Mota;
		}
	}

	public void setMota(String Mota) {
		_Mota = Mota;
	}

	public Long getUngDungId() {
		return _UngDungId;
	}

	public void setUngDungId(Long UngDungId) {
		_UngDungId = UngDungId;
	}

	public Long getHeThongId() {
		return _HeThongId;
	}

	public void setHeThongId(Long HeThongId) {
		_HeThongId = HeThongId;
	}

	public Date getNgayTao() {
		return _NgayTao;
	}

	public void setNgayTao(Date NgayTao) {
		_NgayTao = NgayTao;
	}

	public String getNguoiTao() {
		if (_NguoiTao == null) {
			return StringPool.BLANK;
		}
		else {
			return _NguoiTao;
		}
	}

	public void setNguoiTao(String NguoiTao) {
		_NguoiTao = NguoiTao;
	}

	public Date getNgaySua() {
		return _NgaySua;
	}

	public void setNgaySua(Date NgaySua) {
		_NgaySua = NgaySua;
	}

	public String getNguoiSua() {
		if (_NguoiSua == null) {
			return StringPool.BLANK;
		}
		else {
			return _NguoiSua;
		}
	}

	public void setNguoiSua(String NguoiSua) {
		_NguoiSua = NguoiSua;
	}

	public int getDaXoa() {
		return _DaXoa;
	}

	public void setDaXoa(int DaXoa) {
		_columnBitmask |= DAXOA_COLUMN_BITMASK;

		if (!_setOriginalDaXoa) {
			_setOriginalDaXoa = true;

			_originalDaXoa = _DaXoa;
		}

		_DaXoa = DaXoa;
	}

	public int getOriginalDaXoa() {
		return _originalDaXoa;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ThamSo toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (ThamSo)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(0,
					ThamSo.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	@Override
	public Object clone() {
		ThamSoImpl thamSoImpl = new ThamSoImpl();

		thamSoImpl.setId(getId());
		thamSoImpl.setTen(getTen());
		thamSoImpl.setGiaTri(getGiaTri());
		thamSoImpl.setKieuDuLieu(getKieuDuLieu());
		thamSoImpl.setMota(getMota());
		thamSoImpl.setUngDungId(getUngDungId());
		thamSoImpl.setHeThongId(getHeThongId());
		thamSoImpl.setNgayTao(getNgayTao());
		thamSoImpl.setNguoiTao(getNguoiTao());
		thamSoImpl.setNgaySua(getNgaySua());
		thamSoImpl.setNguoiSua(getNguoiSua());
		thamSoImpl.setDaXoa(getDaXoa());

		thamSoImpl.resetOriginalValues();

		return thamSoImpl;
	}

	public int compareTo(ThamSo thamSo) {
		int value = 0;

		value = getTen().compareTo(thamSo.getTen());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		ThamSo thamSo = null;

		try {
			thamSo = (ThamSo)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = thamSo.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ThamSoModelImpl thamSoModelImpl = this;

		thamSoModelImpl._originalTen = thamSoModelImpl._Ten;

		thamSoModelImpl._originalGiaTri = thamSoModelImpl._giaTri;

		thamSoModelImpl._originalDaXoa = thamSoModelImpl._DaXoa;

		thamSoModelImpl._setOriginalDaXoa = false;

		thamSoModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ThamSo> toCacheModel() {
		ThamSoCacheModel thamSoCacheModel = new ThamSoCacheModel();

		thamSoCacheModel.Id = getId();

		thamSoCacheModel.Ten = getTen();

		String Ten = thamSoCacheModel.Ten;

		if ((Ten != null) && (Ten.length() == 0)) {
			thamSoCacheModel.Ten = null;
		}

		thamSoCacheModel.giaTri = getGiaTri();

		String giaTri = thamSoCacheModel.giaTri;

		if ((giaTri != null) && (giaTri.length() == 0)) {
			thamSoCacheModel.giaTri = null;
		}

		thamSoCacheModel.kieuDuLieu = getKieuDuLieu();

		thamSoCacheModel.Mota = getMota();

		String Mota = thamSoCacheModel.Mota;

		if ((Mota != null) && (Mota.length() == 0)) {
			thamSoCacheModel.Mota = null;
		}

		thamSoCacheModel.UngDungId = getUngDungId();

		thamSoCacheModel.HeThongId = getHeThongId();

		Date NgayTao = getNgayTao();

		if (NgayTao != null) {
			thamSoCacheModel.NgayTao = NgayTao.getTime();
		}
		else {
			thamSoCacheModel.NgayTao = Long.MIN_VALUE;
		}

		thamSoCacheModel.NguoiTao = getNguoiTao();

		String NguoiTao = thamSoCacheModel.NguoiTao;

		if ((NguoiTao != null) && (NguoiTao.length() == 0)) {
			thamSoCacheModel.NguoiTao = null;
		}

		Date NgaySua = getNgaySua();

		if (NgaySua != null) {
			thamSoCacheModel.NgaySua = NgaySua.getTime();
		}
		else {
			thamSoCacheModel.NgaySua = Long.MIN_VALUE;
		}

		thamSoCacheModel.NguoiSua = getNguoiSua();

		String NguoiSua = thamSoCacheModel.NguoiSua;

		if ((NguoiSua != null) && (NguoiSua.length() == 0)) {
			thamSoCacheModel.NguoiSua = null;
		}

		thamSoCacheModel.DaXoa = getDaXoa();

		return thamSoCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(25);

		sb.append("{Id=");
		sb.append(getId());
		sb.append(", Ten=");
		sb.append(getTen());
		sb.append(", giaTri=");
		sb.append(getGiaTri());
		sb.append(", kieuDuLieu=");
		sb.append(getKieuDuLieu());
		sb.append(", Mota=");
		sb.append(getMota());
		sb.append(", UngDungId=");
		sb.append(getUngDungId());
		sb.append(", HeThongId=");
		sb.append(getHeThongId());
		sb.append(", NgayTao=");
		sb.append(getNgayTao());
		sb.append(", NguoiTao=");
		sb.append(getNguoiTao());
		sb.append(", NgaySua=");
		sb.append(getNgaySua());
		sb.append(", NguoiSua=");
		sb.append(getNguoiSua());
		sb.append(", DaXoa=");
		sb.append(getDaXoa());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(40);

		sb.append("<model><model-name>");
		sb.append("org.oep.cmon.dao.thamso.model.ThamSo");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>Id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Ten</column-name><column-value><![CDATA[");
		sb.append(getTen());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>giaTri</column-name><column-value><![CDATA[");
		sb.append(getGiaTri());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>kieuDuLieu</column-name><column-value><![CDATA[");
		sb.append(getKieuDuLieu());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Mota</column-name><column-value><![CDATA[");
		sb.append(getMota());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>UngDungId</column-name><column-value><![CDATA[");
		sb.append(getUngDungId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>HeThongId</column-name><column-value><![CDATA[");
		sb.append(getHeThongId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>NgayTao</column-name><column-value><![CDATA[");
		sb.append(getNgayTao());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>NguoiTao</column-name><column-value><![CDATA[");
		sb.append(getNguoiTao());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>NgaySua</column-name><column-value><![CDATA[");
		sb.append(getNgaySua());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>NguoiSua</column-name><column-value><![CDATA[");
		sb.append(getNguoiSua());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>DaXoa</column-name><column-value><![CDATA[");
		sb.append(getDaXoa());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ThamSo.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			ThamSo.class
		};
	private long _Id;
	private String _Ten;
	private String _originalTen;
	private String _giaTri;
	private String _originalGiaTri;
	private int _kieuDuLieu;
	private String _Mota;
	private Long _UngDungId;
	private Long _HeThongId;
	private Date _NgayTao;
	private String _NguoiTao;
	private Date _NgaySua;
	private String _NguoiSua;
	private int _DaXoa;
	private int _originalDaXoa;
	private boolean _setOriginalDaXoa;
	private transient ExpandoBridge _expandoBridge;
	private long _columnBitmask;
	private ThamSo _escapedModelProxy;
}