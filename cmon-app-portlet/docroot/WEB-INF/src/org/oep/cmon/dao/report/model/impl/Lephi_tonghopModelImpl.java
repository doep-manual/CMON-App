/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.oep.cmon.dao.report.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import org.oep.cmon.dao.report.model.Lephi_tonghop;
import org.oep.cmon.dao.report.model.Lephi_tonghopModel;
import org.oep.cmon.dao.report.service.persistence.Lephi_tonghopPK;

import java.io.Serializable;

import java.sql.Types;

/**
 * The base model implementation for the Lephi_tonghop service. Represents a row in the &quot;Lephi_tonghop&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.oep.cmon.dao.report.model.Lephi_tonghopModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link Lephi_tonghopImpl}.
 * </p>
 *
 * @author VIENPN
 * @see Lephi_tonghopImpl
 * @see org.oep.cmon.dao.report.model.Lephi_tonghop
 * @see org.oep.cmon.dao.report.model.Lephi_tonghopModel
 * @generated
 */
public class Lephi_tonghopModelImpl extends BaseModelImpl<Lephi_tonghop>
	implements Lephi_tonghopModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a lephi_tonghop model instance should use the {@link org.oep.cmon.dao.report.model.Lephi_tonghop} interface instead.
	 */
	public static final String TABLE_NAME = "Lephi_tonghop";
	public static final Object[][] TABLE_COLUMNS = {
			{ "NHOMTHUTUCHANHCHINHID", Types.INTEGER },
			{ "TONGHOSO", Types.VARCHAR },
			{ "LEPHI", Types.VARCHAR },
			{ "PHIHOSO", Types.VARCHAR },
			{ "TONGLEPHI", Types.VARCHAR },
			{ "THANGNHAN", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table Lephi_tonghop (NHOMTHUTUCHANHCHINHID INTEGER not null,TONGHOSO VARCHAR(75) null,LEPHI VARCHAR(75) null,PHIHOSO VARCHAR(75) null,TONGLEPHI VARCHAR(75) null,THANGNHAN VARCHAR(75) not null,primary key (NHOMTHUTUCHANHCHINHID, THANGNHAN))";
	public static final String TABLE_SQL_DROP = "drop table Lephi_tonghop";
	public static final String ORDER_BY_JPQL = " ORDER BY lephi_tonghop.id.NHOMTHUTUCHANHCHINHID ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Lephi_tonghop.NHOMTHUTUCHANHCHINHID ASC";
	public static final String DATA_SOURCE = "egovDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.oep.cmon.dao.report.model.Lephi_tonghop"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.oep.cmon.dao.report.model.Lephi_tonghop"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.oep.cmon.dao.report.model.Lephi_tonghop"));

	public Lephi_tonghopModelImpl() {
	}

	public Lephi_tonghopPK getPrimaryKey() {
		return new Lephi_tonghopPK(_NHOMTHUTUCHANHCHINHID, _THANGNHAN);
	}

	public void setPrimaryKey(Lephi_tonghopPK primaryKey) {
		setNHOMTHUTUCHANHCHINHID(primaryKey.NHOMTHUTUCHANHCHINHID);
		setTHANGNHAN(primaryKey.THANGNHAN);
	}

	public Serializable getPrimaryKeyObj() {
		return new Lephi_tonghopPK(_NHOMTHUTUCHANHCHINHID, _THANGNHAN);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((Lephi_tonghopPK)primaryKeyObj);
	}

	public Class<?> getModelClass() {
		return Lephi_tonghop.class;
	}

	public String getModelClassName() {
		return Lephi_tonghop.class.getName();
	}

	public int getNHOMTHUTUCHANHCHINHID() {
		return _NHOMTHUTUCHANHCHINHID;
	}

	public void setNHOMTHUTUCHANHCHINHID(int NHOMTHUTUCHANHCHINHID) {
		_NHOMTHUTUCHANHCHINHID = NHOMTHUTUCHANHCHINHID;
	}

	public String getTONGHOSO() {
		if (_TONGHOSO == null) {
			return StringPool.BLANK;
		}
		else {
			return _TONGHOSO;
		}
	}

	public void setTONGHOSO(String TONGHOSO) {
		_TONGHOSO = TONGHOSO;
	}

	public String getLEPHI() {
		if (_LEPHI == null) {
			return StringPool.BLANK;
		}
		else {
			return _LEPHI;
		}
	}

	public void setLEPHI(String LEPHI) {
		_LEPHI = LEPHI;
	}

	public String getPHIHOSO() {
		if (_PHIHOSO == null) {
			return StringPool.BLANK;
		}
		else {
			return _PHIHOSO;
		}
	}

	public void setPHIHOSO(String PHIHOSO) {
		_PHIHOSO = PHIHOSO;
	}

	public String getTONGLEPHI() {
		if (_TONGLEPHI == null) {
			return StringPool.BLANK;
		}
		else {
			return _TONGLEPHI;
		}
	}

	public void setTONGLEPHI(String TONGLEPHI) {
		_TONGLEPHI = TONGLEPHI;
	}

	public String getTHANGNHAN() {
		if (_THANGNHAN == null) {
			return StringPool.BLANK;
		}
		else {
			return _THANGNHAN;
		}
	}

	public void setTHANGNHAN(String THANGNHAN) {
		_THANGNHAN = THANGNHAN;
	}

	@Override
	public Lephi_tonghop toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (Lephi_tonghop)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		Lephi_tonghopImpl lephi_tonghopImpl = new Lephi_tonghopImpl();

		lephi_tonghopImpl.setNHOMTHUTUCHANHCHINHID(getNHOMTHUTUCHANHCHINHID());
		lephi_tonghopImpl.setTONGHOSO(getTONGHOSO());
		lephi_tonghopImpl.setLEPHI(getLEPHI());
		lephi_tonghopImpl.setPHIHOSO(getPHIHOSO());
		lephi_tonghopImpl.setTONGLEPHI(getTONGLEPHI());
		lephi_tonghopImpl.setTHANGNHAN(getTHANGNHAN());

		lephi_tonghopImpl.resetOriginalValues();

		return lephi_tonghopImpl;
	}

	public int compareTo(Lephi_tonghop lephi_tonghop) {
		int value = 0;

		if (getNHOMTHUTUCHANHCHINHID() < lephi_tonghop.getNHOMTHUTUCHANHCHINHID()) {
			value = -1;
		}
		else if (getNHOMTHUTUCHANHCHINHID() > lephi_tonghop.getNHOMTHUTUCHANHCHINHID()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		Lephi_tonghop lephi_tonghop = null;

		try {
			lephi_tonghop = (Lephi_tonghop)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		Lephi_tonghopPK primaryKey = lephi_tonghop.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Lephi_tonghop> toCacheModel() {
		Lephi_tonghopCacheModel lephi_tonghopCacheModel = new Lephi_tonghopCacheModel();

		lephi_tonghopCacheModel.NHOMTHUTUCHANHCHINHID = getNHOMTHUTUCHANHCHINHID();

		lephi_tonghopCacheModel.TONGHOSO = getTONGHOSO();

		String TONGHOSO = lephi_tonghopCacheModel.TONGHOSO;

		if ((TONGHOSO != null) && (TONGHOSO.length() == 0)) {
			lephi_tonghopCacheModel.TONGHOSO = null;
		}

		lephi_tonghopCacheModel.LEPHI = getLEPHI();

		String LEPHI = lephi_tonghopCacheModel.LEPHI;

		if ((LEPHI != null) && (LEPHI.length() == 0)) {
			lephi_tonghopCacheModel.LEPHI = null;
		}

		lephi_tonghopCacheModel.PHIHOSO = getPHIHOSO();

		String PHIHOSO = lephi_tonghopCacheModel.PHIHOSO;

		if ((PHIHOSO != null) && (PHIHOSO.length() == 0)) {
			lephi_tonghopCacheModel.PHIHOSO = null;
		}

		lephi_tonghopCacheModel.TONGLEPHI = getTONGLEPHI();

		String TONGLEPHI = lephi_tonghopCacheModel.TONGLEPHI;

		if ((TONGLEPHI != null) && (TONGLEPHI.length() == 0)) {
			lephi_tonghopCacheModel.TONGLEPHI = null;
		}

		lephi_tonghopCacheModel.THANGNHAN = getTHANGNHAN();

		String THANGNHAN = lephi_tonghopCacheModel.THANGNHAN;

		if ((THANGNHAN != null) && (THANGNHAN.length() == 0)) {
			lephi_tonghopCacheModel.THANGNHAN = null;
		}

		return lephi_tonghopCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{NHOMTHUTUCHANHCHINHID=");
		sb.append(getNHOMTHUTUCHANHCHINHID());
		sb.append(", TONGHOSO=");
		sb.append(getTONGHOSO());
		sb.append(", LEPHI=");
		sb.append(getLEPHI());
		sb.append(", PHIHOSO=");
		sb.append(getPHIHOSO());
		sb.append(", TONGLEPHI=");
		sb.append(getTONGLEPHI());
		sb.append(", THANGNHAN=");
		sb.append(getTHANGNHAN());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("org.oep.cmon.dao.report.model.Lephi_tonghop");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>NHOMTHUTUCHANHCHINHID</column-name><column-value><![CDATA[");
		sb.append(getNHOMTHUTUCHANHCHINHID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>TONGHOSO</column-name><column-value><![CDATA[");
		sb.append(getTONGHOSO());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>LEPHI</column-name><column-value><![CDATA[");
		sb.append(getLEPHI());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>PHIHOSO</column-name><column-value><![CDATA[");
		sb.append(getPHIHOSO());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>TONGLEPHI</column-name><column-value><![CDATA[");
		sb.append(getTONGLEPHI());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>THANGNHAN</column-name><column-value><![CDATA[");
		sb.append(getTHANGNHAN());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Lephi_tonghop.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			Lephi_tonghop.class
		};
	private int _NHOMTHUTUCHANHCHINHID;
	private String _TONGHOSO;
	private String _LEPHI;
	private String _PHIHOSO;
	private String _TONGLEPHI;
	private String _THANGNHAN;
	private Lephi_tonghop _escapedModelProxy;
}