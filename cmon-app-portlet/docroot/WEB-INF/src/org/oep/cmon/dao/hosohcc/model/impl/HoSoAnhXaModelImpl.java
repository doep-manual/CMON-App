/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.oep.cmon.dao.hosohcc.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.oep.cmon.dao.hosohcc.model.HoSoAnhXa;
import org.oep.cmon.dao.hosohcc.model.HoSoAnhXaModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;

/**
 * The base model implementation for the HoSoAnhXa service. Represents a row in the &quot;CMON_HOSOANHXA&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.oep.cmon.dao.hosohcc.model.HoSoAnhXaModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link HoSoAnhXaImpl}.
 * </p>
 *
 * @author LIEMNn
 * @see HoSoAnhXaImpl
 * @see org.oep.cmon.dao.hosohcc.model.HoSoAnhXa
 * @see org.oep.cmon.dao.hosohcc.model.HoSoAnhXaModel
 * @generated
 */
public class HoSoAnhXaModelImpl extends BaseModelImpl<HoSoAnhXa>
	implements HoSoAnhXaModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a ho so anh xa model instance should use the {@link org.oep.cmon.dao.hosohcc.model.HoSoAnhXa} interface instead.
	 */
	public static final String TABLE_NAME = "CMON_HOSOANHXA";
	public static final Object[][] TABLE_COLUMNS = {
			{ "ID", Types.BIGINT },
			{ "HOSOTTHCCONGID", Types.BIGINT },
			{ "MAHOSO", Types.VARCHAR },
			{ "TRANGTHAI", Types.INTEGER },
			{ "NGAYSUA", Types.TIMESTAMP },
			{ "NGAYTAO", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table CMON_HOSOANHXA (ID LONG not null primary key,HOSOTTHCCONGID LONG,MAHOSO VARCHAR(75) null,TRANGTHAI INTEGER,NGAYSUA DATE null,NGAYTAO DATE null)";
	public static final String TABLE_SQL_DROP = "drop table CMON_HOSOANHXA";
	public static final String ORDER_BY_JPQL = " ORDER BY hoSoAnhXa.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY CMON_HOSOANHXA.ID ASC";
	public static final String DATA_SOURCE = "egovDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.oep.cmon.dao.hosohcc.model.HoSoAnhXa"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.oep.cmon.dao.hosohcc.model.HoSoAnhXa"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.oep.cmon.dao.hosohcc.model.HoSoAnhXa"),
			true);
	public static long HOSOTTHCCONGID_COLUMN_BITMASK = 1L;
	public static long ID_COLUMN_BITMASK = 2L;
	public static long MAHOSO_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.oep.cmon.dao.hosohcc.model.HoSoAnhXa"));

	public HoSoAnhXaModelImpl() {
	}

	public long getPrimaryKey() {
		return _id;
	}

	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_id);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return HoSoAnhXa.class;
	}

	public String getModelClassName() {
		return HoSoAnhXa.class.getName();
	}

	public long getId() {
		return _id;
	}

	public void setId(long id) {
		_columnBitmask = -1L;

		if (!_setOriginalId) {
			_setOriginalId = true;

			_originalId = _id;
		}

		_id = id;
	}

	public long getOriginalId() {
		return _originalId;
	}

	public long getHoSoTTHCCongId() {
		return _hoSoTTHCCongId;
	}

	public void setHoSoTTHCCongId(long hoSoTTHCCongId) {
		_columnBitmask |= HOSOTTHCCONGID_COLUMN_BITMASK;

		if (!_setOriginalHoSoTTHCCongId) {
			_setOriginalHoSoTTHCCongId = true;

			_originalHoSoTTHCCongId = _hoSoTTHCCongId;
		}

		_hoSoTTHCCongId = hoSoTTHCCongId;
	}

	public long getOriginalHoSoTTHCCongId() {
		return _originalHoSoTTHCCongId;
	}

	public String getMaHoSo() {
		if (_maHoSo == null) {
			return StringPool.BLANK;
		}
		else {
			return _maHoSo;
		}
	}

	public void setMaHoSo(String maHoSo) {
		_columnBitmask |= MAHOSO_COLUMN_BITMASK;

		if (_originalMaHoSo == null) {
			_originalMaHoSo = _maHoSo;
		}

		_maHoSo = maHoSo;
	}

	public String getOriginalMaHoSo() {
		return GetterUtil.getString(_originalMaHoSo);
	}

	public int getTrangThai() {
		return _trangThai;
	}

	public void setTrangThai(int trangThai) {
		_trangThai = trangThai;
	}

	public Date getNgaySua() {
		return _ngaySua;
	}

	public void setNgaySua(Date ngaySua) {
		_ngaySua = ngaySua;
	}

	public Date getNgayTao() {
		return _ngayTao;
	}

	public void setNgayTao(Date ngayTao) {
		_ngayTao = ngayTao;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public HoSoAnhXa toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (HoSoAnhXa)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(0,
					HoSoAnhXa.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	@Override
	public Object clone() {
		HoSoAnhXaImpl hoSoAnhXaImpl = new HoSoAnhXaImpl();

		hoSoAnhXaImpl.setId(getId());
		hoSoAnhXaImpl.setHoSoTTHCCongId(getHoSoTTHCCongId());
		hoSoAnhXaImpl.setMaHoSo(getMaHoSo());
		hoSoAnhXaImpl.setTrangThai(getTrangThai());
		hoSoAnhXaImpl.setNgaySua(getNgaySua());
		hoSoAnhXaImpl.setNgayTao(getNgayTao());

		hoSoAnhXaImpl.resetOriginalValues();

		return hoSoAnhXaImpl;
	}

	public int compareTo(HoSoAnhXa hoSoAnhXa) {
		int value = 0;

		if (getId() < hoSoAnhXa.getId()) {
			value = -1;
		}
		else if (getId() > hoSoAnhXa.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		HoSoAnhXa hoSoAnhXa = null;

		try {
			hoSoAnhXa = (HoSoAnhXa)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = hoSoAnhXa.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		HoSoAnhXaModelImpl hoSoAnhXaModelImpl = this;

		hoSoAnhXaModelImpl._originalId = hoSoAnhXaModelImpl._id;

		hoSoAnhXaModelImpl._setOriginalId = false;

		hoSoAnhXaModelImpl._originalHoSoTTHCCongId = hoSoAnhXaModelImpl._hoSoTTHCCongId;

		hoSoAnhXaModelImpl._setOriginalHoSoTTHCCongId = false;

		hoSoAnhXaModelImpl._originalMaHoSo = hoSoAnhXaModelImpl._maHoSo;

		hoSoAnhXaModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<HoSoAnhXa> toCacheModel() {
		HoSoAnhXaCacheModel hoSoAnhXaCacheModel = new HoSoAnhXaCacheModel();

		hoSoAnhXaCacheModel.id = getId();

		hoSoAnhXaCacheModel.hoSoTTHCCongId = getHoSoTTHCCongId();

		hoSoAnhXaCacheModel.maHoSo = getMaHoSo();

		String maHoSo = hoSoAnhXaCacheModel.maHoSo;

		if ((maHoSo != null) && (maHoSo.length() == 0)) {
			hoSoAnhXaCacheModel.maHoSo = null;
		}

		hoSoAnhXaCacheModel.trangThai = getTrangThai();

		Date ngaySua = getNgaySua();

		if (ngaySua != null) {
			hoSoAnhXaCacheModel.ngaySua = ngaySua.getTime();
		}
		else {
			hoSoAnhXaCacheModel.ngaySua = Long.MIN_VALUE;
		}

		Date ngayTao = getNgayTao();

		if (ngayTao != null) {
			hoSoAnhXaCacheModel.ngayTao = ngayTao.getTime();
		}
		else {
			hoSoAnhXaCacheModel.ngayTao = Long.MIN_VALUE;
		}

		return hoSoAnhXaCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", hoSoTTHCCongId=");
		sb.append(getHoSoTTHCCongId());
		sb.append(", maHoSo=");
		sb.append(getMaHoSo());
		sb.append(", trangThai=");
		sb.append(getTrangThai());
		sb.append(", ngaySua=");
		sb.append(getNgaySua());
		sb.append(", ngayTao=");
		sb.append(getNgayTao());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("org.oep.cmon.dao.hosohcc.model.HoSoAnhXa");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hoSoTTHCCongId</column-name><column-value><![CDATA[");
		sb.append(getHoSoTTHCCongId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>maHoSo</column-name><column-value><![CDATA[");
		sb.append(getMaHoSo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>trangThai</column-name><column-value><![CDATA[");
		sb.append(getTrangThai());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ngaySua</column-name><column-value><![CDATA[");
		sb.append(getNgaySua());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ngayTao</column-name><column-value><![CDATA[");
		sb.append(getNgayTao());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = HoSoAnhXa.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			HoSoAnhXa.class
		};
	private long _id;
	private long _originalId;
	private boolean _setOriginalId;
	private long _hoSoTTHCCongId;
	private long _originalHoSoTTHCCongId;
	private boolean _setOriginalHoSoTTHCCongId;
	private String _maHoSo;
	private String _originalMaHoSo;
	private int _trangThai;
	private Date _ngaySua;
	private Date _ngayTao;
	private transient ExpandoBridge _expandoBridge;
	private long _columnBitmask;
	private HoSoAnhXa _escapedModelProxy;
}