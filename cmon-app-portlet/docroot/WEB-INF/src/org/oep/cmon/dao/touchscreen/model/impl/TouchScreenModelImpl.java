/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.oep.cmon.dao.touchscreen.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.oep.cmon.dao.touchscreen.model.TouchScreen;
import org.oep.cmon.dao.touchscreen.model.TouchScreenModel;

import java.io.Serializable;

import java.sql.Types;

/**
 * The base model implementation for the TouchScreen service. Represents a row in the &quot;DNICT_TouchScreen&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.oep.cmon.dao.touchscreen.model.TouchScreenModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TouchScreenImpl}.
 * </p>
 *
 * @author VIENPN
 * @see TouchScreenImpl
 * @see org.oep.cmon.dao.touchscreen.model.TouchScreen
 * @see org.oep.cmon.dao.touchscreen.model.TouchScreenModel
 * @generated
 */
public class TouchScreenModelImpl extends BaseModelImpl<TouchScreen>
	implements TouchScreenModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a touch screen model instance should use the {@link org.oep.cmon.dao.touchscreen.model.TouchScreen} interface instead.
	 */
	public static final String TABLE_NAME = "DNICT_TouchScreen";
	public static final Object[][] TABLE_COLUMNS = {
			{ "ID", Types.BIGINT },
			{ "NAME", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table DNICT_TouchScreen (ID LONG not null primary key,NAME VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table DNICT_TouchScreen";
	public static final String DATA_SOURCE = "egovDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.oep.cmon.dao.touchscreen.model.TouchScreen"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.oep.cmon.dao.touchscreen.model.TouchScreen"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.oep.cmon.dao.touchscreen.model.TouchScreen"));

	public TouchScreenModelImpl() {
	}

	public long getPrimaryKey() {
		return _ID;
	}

	public void setPrimaryKey(long primaryKey) {
		setID(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_ID);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return TouchScreen.class;
	}

	public String getModelClassName() {
		return TouchScreen.class.getName();
	}

	public long getID() {
		return _ID;
	}

	public void setID(long ID) {
		_ID = ID;
	}

	public String getNAME() {
		if (_NAME == null) {
			return StringPool.BLANK;
		}
		else {
			return _NAME;
		}
	}

	public void setNAME(String NAME) {
		_NAME = NAME;
	}

	@Override
	public TouchScreen toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (TouchScreen)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(0,
					TouchScreen.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	@Override
	public Object clone() {
		TouchScreenImpl touchScreenImpl = new TouchScreenImpl();

		touchScreenImpl.setID(getID());
		touchScreenImpl.setNAME(getNAME());

		touchScreenImpl.resetOriginalValues();

		return touchScreenImpl;
	}

	public int compareTo(TouchScreen touchScreen) {
		long primaryKey = touchScreen.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		TouchScreen touchScreen = null;

		try {
			touchScreen = (TouchScreen)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = touchScreen.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<TouchScreen> toCacheModel() {
		TouchScreenCacheModel touchScreenCacheModel = new TouchScreenCacheModel();

		touchScreenCacheModel.ID = getID();

		touchScreenCacheModel.NAME = getNAME();

		String NAME = touchScreenCacheModel.NAME;

		if ((NAME != null) && (NAME.length() == 0)) {
			touchScreenCacheModel.NAME = null;
		}

		return touchScreenCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(5);

		sb.append("{ID=");
		sb.append(getID());
		sb.append(", NAME=");
		sb.append(getNAME());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(10);

		sb.append("<model><model-name>");
		sb.append("org.oep.cmon.dao.touchscreen.model.TouchScreen");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>ID</column-name><column-value><![CDATA[");
		sb.append(getID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>NAME</column-name><column-value><![CDATA[");
		sb.append(getNAME());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = TouchScreen.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			TouchScreen.class
		};
	private long _ID;
	private String _NAME;
	private transient ExpandoBridge _expandoBridge;
	private TouchScreen _escapedModelProxy;
}