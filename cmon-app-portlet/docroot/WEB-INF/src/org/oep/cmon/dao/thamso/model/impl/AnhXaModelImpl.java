/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.oep.cmon.dao.thamso.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.oep.cmon.dao.thamso.model.AnhXa;
import org.oep.cmon.dao.thamso.model.AnhXaModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;

/**
 * The base model implementation for the AnhXa service. Represents a row in the &quot;CMON_DANHMUCANHXA&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.oep.cmon.dao.thamso.model.AnhXaModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AnhXaImpl}.
 * </p>
 *
 * @author LIEMNN
 * @see AnhXaImpl
 * @see org.oep.cmon.dao.thamso.model.AnhXa
 * @see org.oep.cmon.dao.thamso.model.AnhXaModel
 * @generated
 */
public class AnhXaModelImpl extends BaseModelImpl<AnhXa> implements AnhXaModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a anh xa model instance should use the {@link org.oep.cmon.dao.thamso.model.AnhXa} interface instead.
	 */
	public static final String TABLE_NAME = "CMON_DANHMUCANHXA";
	public static final Object[][] TABLE_COLUMNS = {
			{ "ID", Types.BIGINT },
			{ "MADNG", Types.VARCHAR },
			{ "TENDNG", Types.VARCHAR },
			{ "MAKHAC", Types.VARCHAR },
			{ "TENKHAC", Types.VARCHAR },
			{ "TENBANG", Types.VARCHAR },
			{ "DANHMUCUNGDUNGID", Types.BIGINT },
			{ "NGAYTAO", Types.TIMESTAMP },
			{ "NGUOITAO", Types.VARCHAR },
			{ "NGAYSUA", Types.TIMESTAMP },
			{ "NGUOISUA", Types.VARCHAR },
			{ "DAXOA", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table CMON_DANHMUCANHXA (ID LONG not null primary key,MADNG VARCHAR(75) null,TENDNG VARCHAR(75) null,MAKHAC VARCHAR(75) null,TENKHAC VARCHAR(75) null,TENBANG VARCHAR(75) null,DANHMUCUNGDUNGID LONG,NGAYTAO DATE null,NGUOITAO VARCHAR(75) null,NGAYSUA DATE null,NGUOISUA VARCHAR(75) null,DAXOA INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table CMON_DANHMUCANHXA";
	public static final String ORDER_BY_JPQL = " ORDER BY anhXa.Id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY CMON_DANHMUCANHXA.ID ASC";
	public static final String DATA_SOURCE = "egovDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.oep.cmon.dao.thamso.model.AnhXa"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.oep.cmon.dao.thamso.model.AnhXa"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.oep.cmon.dao.thamso.model.AnhXa"),
			true);
	public static long UNGDUNGID_COLUMN_BITMASK = 1L;
	public static long MADNG_COLUMN_BITMASK = 2L;
	public static long TENBANG_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.oep.cmon.dao.thamso.model.AnhXa"));

	public AnhXaModelImpl() {
	}

	public long getPrimaryKey() {
		return _Id;
	}

	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_Id);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return AnhXa.class;
	}

	public String getModelClassName() {
		return AnhXa.class.getName();
	}

	public long getId() {
		return _Id;
	}

	public void setId(long Id) {
		_columnBitmask = -1L;

		_Id = Id;
	}

	public String getMaDNG() {
		return _maDNG;
	}

	public void setMaDNG(String maDNG) {
		_columnBitmask |= MADNG_COLUMN_BITMASK;

		if (_originalMaDNG == null) {
			_originalMaDNG = _maDNG;
		}

		_maDNG = maDNG;
	}

	public String getOriginalMaDNG() {
		return _originalMaDNG;
	}

	public String getTenDNG() {
		return _tenDNG;
	}

	public void setTenDNG(String tenDNG) {
		_tenDNG = tenDNG;
	}

	public String getMaKhac() {
		if (_maKhac == null) {
			return StringPool.BLANK;
		}
		else {
			return _maKhac;
		}
	}

	public void setMaKhac(String maKhac) {
		_maKhac = maKhac;
	}

	public String getTenKhac() {
		if (_tenKhac == null) {
			return StringPool.BLANK;
		}
		else {
			return _tenKhac;
		}
	}

	public void setTenKhac(String tenKhac) {
		_tenKhac = tenKhac;
	}

	public String getTenBang() {
		if (_tenBang == null) {
			return StringPool.BLANK;
		}
		else {
			return _tenBang;
		}
	}

	public void setTenBang(String tenBang) {
		_columnBitmask |= TENBANG_COLUMN_BITMASK;

		if (_originalTenBang == null) {
			_originalTenBang = _tenBang;
		}

		_tenBang = tenBang;
	}

	public String getOriginalTenBang() {
		return GetterUtil.getString(_originalTenBang);
	}

	public long getUngDungId() {
		return _UngDungId;
	}

	public void setUngDungId(long UngDungId) {
		_columnBitmask |= UNGDUNGID_COLUMN_BITMASK;

		if (!_setOriginalUngDungId) {
			_setOriginalUngDungId = true;

			_originalUngDungId = _UngDungId;
		}

		_UngDungId = UngDungId;
	}

	public long getOriginalUngDungId() {
		return _originalUngDungId;
	}

	public Date getNgayTao() {
		return _NgayTao;
	}

	public void setNgayTao(Date NgayTao) {
		_NgayTao = NgayTao;
	}

	public String getNguoiTao() {
		if (_NguoiTao == null) {
			return StringPool.BLANK;
		}
		else {
			return _NguoiTao;
		}
	}

	public void setNguoiTao(String NguoiTao) {
		_NguoiTao = NguoiTao;
	}

	public Date getNgaySua() {
		return _NgaySua;
	}

	public void setNgaySua(Date NgaySua) {
		_NgaySua = NgaySua;
	}

	public String getNguoiSua() {
		if (_NguoiSua == null) {
			return StringPool.BLANK;
		}
		else {
			return _NguoiSua;
		}
	}

	public void setNguoiSua(String NguoiSua) {
		_NguoiSua = NguoiSua;
	}

	public int getDaXoa() {
		return _DaXoa;
	}

	public void setDaXoa(int DaXoa) {
		_DaXoa = DaXoa;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public AnhXa toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (AnhXa)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(0,
					AnhXa.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	@Override
	public Object clone() {
		AnhXaImpl anhXaImpl = new AnhXaImpl();

		anhXaImpl.setId(getId());
		anhXaImpl.setMaDNG(getMaDNG());
		anhXaImpl.setTenDNG(getTenDNG());
		anhXaImpl.setMaKhac(getMaKhac());
		anhXaImpl.setTenKhac(getTenKhac());
		anhXaImpl.setTenBang(getTenBang());
		anhXaImpl.setUngDungId(getUngDungId());
		anhXaImpl.setNgayTao(getNgayTao());
		anhXaImpl.setNguoiTao(getNguoiTao());
		anhXaImpl.setNgaySua(getNgaySua());
		anhXaImpl.setNguoiSua(getNguoiSua());
		anhXaImpl.setDaXoa(getDaXoa());

		anhXaImpl.resetOriginalValues();

		return anhXaImpl;
	}

	public int compareTo(AnhXa anhXa) {
		int value = 0;

		if (getId() < anhXa.getId()) {
			value = -1;
		}
		else if (getId() > anhXa.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		AnhXa anhXa = null;

		try {
			anhXa = (AnhXa)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = anhXa.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		AnhXaModelImpl anhXaModelImpl = this;

		anhXaModelImpl._originalMaDNG = anhXaModelImpl._maDNG;

		anhXaModelImpl._originalTenBang = anhXaModelImpl._tenBang;

		anhXaModelImpl._originalUngDungId = anhXaModelImpl._UngDungId;

		anhXaModelImpl._setOriginalUngDungId = false;

		anhXaModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<AnhXa> toCacheModel() {
		AnhXaCacheModel anhXaCacheModel = new AnhXaCacheModel();

		anhXaCacheModel.Id = getId();

		anhXaCacheModel.maDNG = getMaDNG();

		String maDNG = anhXaCacheModel.maDNG;

		if ((maDNG != null) && (maDNG.length() == 0)) {
			anhXaCacheModel.maDNG = null;
		}

		anhXaCacheModel.tenDNG = getTenDNG();

		String tenDNG = anhXaCacheModel.tenDNG;

		if ((tenDNG != null) && (tenDNG.length() == 0)) {
			anhXaCacheModel.tenDNG = null;
		}

		anhXaCacheModel.maKhac = getMaKhac();

		String maKhac = anhXaCacheModel.maKhac;

		if ((maKhac != null) && (maKhac.length() == 0)) {
			anhXaCacheModel.maKhac = null;
		}

		anhXaCacheModel.tenKhac = getTenKhac();

		String tenKhac = anhXaCacheModel.tenKhac;

		if ((tenKhac != null) && (tenKhac.length() == 0)) {
			anhXaCacheModel.tenKhac = null;
		}

		anhXaCacheModel.tenBang = getTenBang();

		String tenBang = anhXaCacheModel.tenBang;

		if ((tenBang != null) && (tenBang.length() == 0)) {
			anhXaCacheModel.tenBang = null;
		}

		anhXaCacheModel.UngDungId = getUngDungId();

		Date NgayTao = getNgayTao();

		if (NgayTao != null) {
			anhXaCacheModel.NgayTao = NgayTao.getTime();
		}
		else {
			anhXaCacheModel.NgayTao = Long.MIN_VALUE;
		}

		anhXaCacheModel.NguoiTao = getNguoiTao();

		String NguoiTao = anhXaCacheModel.NguoiTao;

		if ((NguoiTao != null) && (NguoiTao.length() == 0)) {
			anhXaCacheModel.NguoiTao = null;
		}

		Date NgaySua = getNgaySua();

		if (NgaySua != null) {
			anhXaCacheModel.NgaySua = NgaySua.getTime();
		}
		else {
			anhXaCacheModel.NgaySua = Long.MIN_VALUE;
		}

		anhXaCacheModel.NguoiSua = getNguoiSua();

		String NguoiSua = anhXaCacheModel.NguoiSua;

		if ((NguoiSua != null) && (NguoiSua.length() == 0)) {
			anhXaCacheModel.NguoiSua = null;
		}

		anhXaCacheModel.DaXoa = getDaXoa();

		return anhXaCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(25);

		sb.append("{Id=");
		sb.append(getId());
		sb.append(", maDNG=");
		sb.append(getMaDNG());
		sb.append(", tenDNG=");
		sb.append(getTenDNG());
		sb.append(", maKhac=");
		sb.append(getMaKhac());
		sb.append(", tenKhac=");
		sb.append(getTenKhac());
		sb.append(", tenBang=");
		sb.append(getTenBang());
		sb.append(", UngDungId=");
		sb.append(getUngDungId());
		sb.append(", NgayTao=");
		sb.append(getNgayTao());
		sb.append(", NguoiTao=");
		sb.append(getNguoiTao());
		sb.append(", NgaySua=");
		sb.append(getNgaySua());
		sb.append(", NguoiSua=");
		sb.append(getNguoiSua());
		sb.append(", DaXoa=");
		sb.append(getDaXoa());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(40);

		sb.append("<model><model-name>");
		sb.append("org.oep.cmon.dao.thamso.model.AnhXa");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>Id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>maDNG</column-name><column-value><![CDATA[");
		sb.append(getMaDNG());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tenDNG</column-name><column-value><![CDATA[");
		sb.append(getTenDNG());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>maKhac</column-name><column-value><![CDATA[");
		sb.append(getMaKhac());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tenKhac</column-name><column-value><![CDATA[");
		sb.append(getTenKhac());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tenBang</column-name><column-value><![CDATA[");
		sb.append(getTenBang());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>UngDungId</column-name><column-value><![CDATA[");
		sb.append(getUngDungId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>NgayTao</column-name><column-value><![CDATA[");
		sb.append(getNgayTao());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>NguoiTao</column-name><column-value><![CDATA[");
		sb.append(getNguoiTao());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>NgaySua</column-name><column-value><![CDATA[");
		sb.append(getNgaySua());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>NguoiSua</column-name><column-value><![CDATA[");
		sb.append(getNguoiSua());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>DaXoa</column-name><column-value><![CDATA[");
		sb.append(getDaXoa());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = AnhXa.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			AnhXa.class
		};
	private long _Id;
	private String _maDNG;
	private String _originalMaDNG;
	private String _tenDNG;
	private String _maKhac;
	private String _tenKhac;
	private String _tenBang;
	private String _originalTenBang;
	private long _UngDungId;
	private long _originalUngDungId;
	private boolean _setOriginalUngDungId;
	private Date _NgayTao;
	private String _NguoiTao;
	private Date _NgaySua;
	private String _NguoiSua;
	private int _DaXoa;
	private transient ExpandoBridge _expandoBridge;
	private long _columnBitmask;
	private AnhXa _escapedModelProxy;
}