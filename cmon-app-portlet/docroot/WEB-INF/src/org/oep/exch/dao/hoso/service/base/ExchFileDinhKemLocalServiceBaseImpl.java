/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.oep.exch.dao.hoso.service.base;

import com.liferay.counter.service.CounterLocalService;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.log.Log;
import com.liferay.portal.kernel.log.LogFactoryUtil;
import com.liferay.portal.kernel.search.Indexer;
import com.liferay.portal.kernel.search.IndexerRegistryUtil;
import com.liferay.portal.kernel.search.SearchException;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.ResourceLocalService;
import com.liferay.portal.service.ResourceService;
import com.liferay.portal.service.UserLocalService;
import com.liferay.portal.service.UserService;
import com.liferay.portal.service.persistence.ResourcePersistence;
import com.liferay.portal.service.persistence.UserPersistence;

import org.oep.exch.dao.hoso.model.ExchFileDinhKem;
import org.oep.exch.dao.hoso.service.ExchFileDinhKemLocalService;
import org.oep.exch.dao.hoso.service.HoSoMotCuaLocalService;
import org.oep.exch.dao.hoso.service.HoSoTrucTuyenLocalService;
import org.oep.exch.dao.hoso.service.KetQuaHosoLocalService;
import org.oep.exch.dao.hoso.service.TrangThaiHosoLocalService;
import org.oep.exch.dao.hoso.service.UpdateHoSoTrucTuyenLocalService;
import org.oep.exch.dao.hoso.service.persistence.ExchFileDinhKemPersistence;
import org.oep.exch.dao.hoso.service.persistence.HoSoMotCuaPersistence;
import org.oep.exch.dao.hoso.service.persistence.HoSoTrucTuyenPersistence;
import org.oep.exch.dao.hoso.service.persistence.KetQuaHosoPersistence;
import org.oep.exch.dao.hoso.service.persistence.TrangThaiHosoPersistence;
import org.oep.exch.dao.hoso.service.persistence.UpdateHoSoTrucTuyenPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * The base implementation of the exch file dinh kem local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link org.oep.exch.dao.hoso.service.impl.ExchFileDinhKemLocalServiceImpl}.
 * </p>
 *
 * @author NAM
 * @see org.oep.exch.dao.hoso.service.impl.ExchFileDinhKemLocalServiceImpl
 * @see org.oep.exch.dao.hoso.service.ExchFileDinhKemLocalServiceUtil
 * @generated
 */
public abstract class ExchFileDinhKemLocalServiceBaseImpl
	implements ExchFileDinhKemLocalService, IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link org.oep.exch.dao.hoso.service.ExchFileDinhKemLocalServiceUtil} to access the exch file dinh kem local service.
	 */

	/**
	 * Adds the exch file dinh kem to the database. Also notifies the appropriate model listeners.
	 *
	 * @param exchFileDinhKem the exch file dinh kem
	 * @return the exch file dinh kem that was added
	 * @throws SystemException if a system exception occurred
	 */
	public ExchFileDinhKem addExchFileDinhKem(ExchFileDinhKem exchFileDinhKem)
		throws SystemException {
		exchFileDinhKem.setNew(true);

		exchFileDinhKem = exchFileDinhKemPersistence.update(exchFileDinhKem,
				false);

		Indexer indexer = IndexerRegistryUtil.getIndexer(getModelClassName());

		if (indexer != null) {
			try {
				indexer.reindex(exchFileDinhKem);
			}
			catch (SearchException se) {
				if (_log.isWarnEnabled()) {
					_log.warn(se, se);
				}
			}
		}

		return exchFileDinhKem;
	}

	/**
	 * Creates a new exch file dinh kem with the primary key. Does not add the exch file dinh kem to the database.
	 *
	 * @param id the primary key for the new exch file dinh kem
	 * @return the new exch file dinh kem
	 */
	public ExchFileDinhKem createExchFileDinhKem(long id) {
		return exchFileDinhKemPersistence.create(id);
	}

	/**
	 * Deletes the exch file dinh kem with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param id the primary key of the exch file dinh kem
	 * @throws PortalException if a exch file dinh kem with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	public void deleteExchFileDinhKem(long id)
		throws PortalException, SystemException {
		ExchFileDinhKem exchFileDinhKem = exchFileDinhKemPersistence.remove(id);

		Indexer indexer = IndexerRegistryUtil.getIndexer(getModelClassName());

		if (indexer != null) {
			try {
				indexer.delete(exchFileDinhKem);
			}
			catch (SearchException se) {
				if (_log.isWarnEnabled()) {
					_log.warn(se, se);
				}
			}
		}
	}

	/**
	 * Deletes the exch file dinh kem from the database. Also notifies the appropriate model listeners.
	 *
	 * @param exchFileDinhKem the exch file dinh kem
	 * @throws SystemException if a system exception occurred
	 */
	public void deleteExchFileDinhKem(ExchFileDinhKem exchFileDinhKem)
		throws SystemException {
		exchFileDinhKemPersistence.remove(exchFileDinhKem);

		Indexer indexer = IndexerRegistryUtil.getIndexer(getModelClassName());

		if (indexer != null) {
			try {
				indexer.delete(exchFileDinhKem);
			}
			catch (SearchException se) {
				if (_log.isWarnEnabled()) {
					_log.warn(se, se);
				}
			}
		}
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return exchFileDinhKemPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return exchFileDinhKemPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return exchFileDinhKemPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return exchFileDinhKemPersistence.countWithDynamicQuery(dynamicQuery);
	}

	public ExchFileDinhKem fetchExchFileDinhKem(long id)
		throws SystemException {
		return exchFileDinhKemPersistence.fetchByPrimaryKey(id);
	}

	/**
	 * Returns the exch file dinh kem with the primary key.
	 *
	 * @param id the primary key of the exch file dinh kem
	 * @return the exch file dinh kem
	 * @throws PortalException if a exch file dinh kem with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	public ExchFileDinhKem getExchFileDinhKem(long id)
		throws PortalException, SystemException {
		return exchFileDinhKemPersistence.findByPrimaryKey(id);
	}

	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return exchFileDinhKemPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the exch file dinh kems.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set.
	 * </p>
	 *
	 * @param start the lower bound of the range of exch file dinh kems
	 * @param end the upper bound of the range of exch file dinh kems (not inclusive)
	 * @return the range of exch file dinh kems
	 * @throws SystemException if a system exception occurred
	 */
	public List<ExchFileDinhKem> getExchFileDinhKems(int start, int end)
		throws SystemException {
		return exchFileDinhKemPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of exch file dinh kems.
	 *
	 * @return the number of exch file dinh kems
	 * @throws SystemException if a system exception occurred
	 */
	public int getExchFileDinhKemsCount() throws SystemException {
		return exchFileDinhKemPersistence.countAll();
	}

	/**
	 * Updates the exch file dinh kem in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param exchFileDinhKem the exch file dinh kem
	 * @return the exch file dinh kem that was updated
	 * @throws SystemException if a system exception occurred
	 */
	public ExchFileDinhKem updateExchFileDinhKem(
		ExchFileDinhKem exchFileDinhKem) throws SystemException {
		return updateExchFileDinhKem(exchFileDinhKem, true);
	}

	/**
	 * Updates the exch file dinh kem in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param exchFileDinhKem the exch file dinh kem
	 * @param merge whether to merge the exch file dinh kem with the current session. See {@link com.liferay.portal.service.persistence.BatchSession#update(com.liferay.portal.kernel.dao.orm.Session, com.liferay.portal.model.BaseModel, boolean)} for an explanation.
	 * @return the exch file dinh kem that was updated
	 * @throws SystemException if a system exception occurred
	 */
	public ExchFileDinhKem updateExchFileDinhKem(
		ExchFileDinhKem exchFileDinhKem, boolean merge)
		throws SystemException {
		exchFileDinhKem.setNew(false);

		exchFileDinhKem = exchFileDinhKemPersistence.update(exchFileDinhKem,
				merge);

		Indexer indexer = IndexerRegistryUtil.getIndexer(getModelClassName());

		if (indexer != null) {
			try {
				indexer.reindex(exchFileDinhKem);
			}
			catch (SearchException se) {
				if (_log.isWarnEnabled()) {
					_log.warn(se, se);
				}
			}
		}

		return exchFileDinhKem;
	}

	/**
	 * Returns the exch file dinh kem local service.
	 *
	 * @return the exch file dinh kem local service
	 */
	public ExchFileDinhKemLocalService getExchFileDinhKemLocalService() {
		return exchFileDinhKemLocalService;
	}

	/**
	 * Sets the exch file dinh kem local service.
	 *
	 * @param exchFileDinhKemLocalService the exch file dinh kem local service
	 */
	public void setExchFileDinhKemLocalService(
		ExchFileDinhKemLocalService exchFileDinhKemLocalService) {
		this.exchFileDinhKemLocalService = exchFileDinhKemLocalService;
	}

	/**
	 * Returns the exch file dinh kem persistence.
	 *
	 * @return the exch file dinh kem persistence
	 */
	public ExchFileDinhKemPersistence getExchFileDinhKemPersistence() {
		return exchFileDinhKemPersistence;
	}

	/**
	 * Sets the exch file dinh kem persistence.
	 *
	 * @param exchFileDinhKemPersistence the exch file dinh kem persistence
	 */
	public void setExchFileDinhKemPersistence(
		ExchFileDinhKemPersistence exchFileDinhKemPersistence) {
		this.exchFileDinhKemPersistence = exchFileDinhKemPersistence;
	}

	/**
	 * Returns the ho so mot cua local service.
	 *
	 * @return the ho so mot cua local service
	 */
	public HoSoMotCuaLocalService getHoSoMotCuaLocalService() {
		return hoSoMotCuaLocalService;
	}

	/**
	 * Sets the ho so mot cua local service.
	 *
	 * @param hoSoMotCuaLocalService the ho so mot cua local service
	 */
	public void setHoSoMotCuaLocalService(
		HoSoMotCuaLocalService hoSoMotCuaLocalService) {
		this.hoSoMotCuaLocalService = hoSoMotCuaLocalService;
	}

	/**
	 * Returns the ho so mot cua persistence.
	 *
	 * @return the ho so mot cua persistence
	 */
	public HoSoMotCuaPersistence getHoSoMotCuaPersistence() {
		return hoSoMotCuaPersistence;
	}

	/**
	 * Sets the ho so mot cua persistence.
	 *
	 * @param hoSoMotCuaPersistence the ho so mot cua persistence
	 */
	public void setHoSoMotCuaPersistence(
		HoSoMotCuaPersistence hoSoMotCuaPersistence) {
		this.hoSoMotCuaPersistence = hoSoMotCuaPersistence;
	}

	/**
	 * Returns the ho so truc tuyen local service.
	 *
	 * @return the ho so truc tuyen local service
	 */
	public HoSoTrucTuyenLocalService getHoSoTrucTuyenLocalService() {
		return hoSoTrucTuyenLocalService;
	}

	/**
	 * Sets the ho so truc tuyen local service.
	 *
	 * @param hoSoTrucTuyenLocalService the ho so truc tuyen local service
	 */
	public void setHoSoTrucTuyenLocalService(
		HoSoTrucTuyenLocalService hoSoTrucTuyenLocalService) {
		this.hoSoTrucTuyenLocalService = hoSoTrucTuyenLocalService;
	}

	/**
	 * Returns the ho so truc tuyen persistence.
	 *
	 * @return the ho so truc tuyen persistence
	 */
	public HoSoTrucTuyenPersistence getHoSoTrucTuyenPersistence() {
		return hoSoTrucTuyenPersistence;
	}

	/**
	 * Sets the ho so truc tuyen persistence.
	 *
	 * @param hoSoTrucTuyenPersistence the ho so truc tuyen persistence
	 */
	public void setHoSoTrucTuyenPersistence(
		HoSoTrucTuyenPersistence hoSoTrucTuyenPersistence) {
		this.hoSoTrucTuyenPersistence = hoSoTrucTuyenPersistence;
	}

	/**
	 * Returns the ket qua hoso local service.
	 *
	 * @return the ket qua hoso local service
	 */
	public KetQuaHosoLocalService getKetQuaHosoLocalService() {
		return ketQuaHosoLocalService;
	}

	/**
	 * Sets the ket qua hoso local service.
	 *
	 * @param ketQuaHosoLocalService the ket qua hoso local service
	 */
	public void setKetQuaHosoLocalService(
		KetQuaHosoLocalService ketQuaHosoLocalService) {
		this.ketQuaHosoLocalService = ketQuaHosoLocalService;
	}

	/**
	 * Returns the ket qua hoso persistence.
	 *
	 * @return the ket qua hoso persistence
	 */
	public KetQuaHosoPersistence getKetQuaHosoPersistence() {
		return ketQuaHosoPersistence;
	}

	/**
	 * Sets the ket qua hoso persistence.
	 *
	 * @param ketQuaHosoPersistence the ket qua hoso persistence
	 */
	public void setKetQuaHosoPersistence(
		KetQuaHosoPersistence ketQuaHosoPersistence) {
		this.ketQuaHosoPersistence = ketQuaHosoPersistence;
	}

	/**
	 * Returns the trang thai hoso local service.
	 *
	 * @return the trang thai hoso local service
	 */
	public TrangThaiHosoLocalService getTrangThaiHosoLocalService() {
		return trangThaiHosoLocalService;
	}

	/**
	 * Sets the trang thai hoso local service.
	 *
	 * @param trangThaiHosoLocalService the trang thai hoso local service
	 */
	public void setTrangThaiHosoLocalService(
		TrangThaiHosoLocalService trangThaiHosoLocalService) {
		this.trangThaiHosoLocalService = trangThaiHosoLocalService;
	}

	/**
	 * Returns the trang thai hoso persistence.
	 *
	 * @return the trang thai hoso persistence
	 */
	public TrangThaiHosoPersistence getTrangThaiHosoPersistence() {
		return trangThaiHosoPersistence;
	}

	/**
	 * Sets the trang thai hoso persistence.
	 *
	 * @param trangThaiHosoPersistence the trang thai hoso persistence
	 */
	public void setTrangThaiHosoPersistence(
		TrangThaiHosoPersistence trangThaiHosoPersistence) {
		this.trangThaiHosoPersistence = trangThaiHosoPersistence;
	}

	/**
	 * Returns the update ho so truc tuyen local service.
	 *
	 * @return the update ho so truc tuyen local service
	 */
	public UpdateHoSoTrucTuyenLocalService getUpdateHoSoTrucTuyenLocalService() {
		return updateHoSoTrucTuyenLocalService;
	}

	/**
	 * Sets the update ho so truc tuyen local service.
	 *
	 * @param updateHoSoTrucTuyenLocalService the update ho so truc tuyen local service
	 */
	public void setUpdateHoSoTrucTuyenLocalService(
		UpdateHoSoTrucTuyenLocalService updateHoSoTrucTuyenLocalService) {
		this.updateHoSoTrucTuyenLocalService = updateHoSoTrucTuyenLocalService;
	}

	/**
	 * Returns the update ho so truc tuyen persistence.
	 *
	 * @return the update ho so truc tuyen persistence
	 */
	public UpdateHoSoTrucTuyenPersistence getUpdateHoSoTrucTuyenPersistence() {
		return updateHoSoTrucTuyenPersistence;
	}

	/**
	 * Sets the update ho so truc tuyen persistence.
	 *
	 * @param updateHoSoTrucTuyenPersistence the update ho so truc tuyen persistence
	 */
	public void setUpdateHoSoTrucTuyenPersistence(
		UpdateHoSoTrucTuyenPersistence updateHoSoTrucTuyenPersistence) {
		this.updateHoSoTrucTuyenPersistence = updateHoSoTrucTuyenPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the resource remote service.
	 *
	 * @return the resource remote service
	 */
	public ResourceService getResourceService() {
		return resourceService;
	}

	/**
	 * Sets the resource remote service.
	 *
	 * @param resourceService the resource remote service
	 */
	public void setResourceService(ResourceService resourceService) {
		this.resourceService = resourceService;
	}

	/**
	 * Returns the resource persistence.
	 *
	 * @return the resource persistence
	 */
	public ResourcePersistence getResourcePersistence() {
		return resourcePersistence;
	}

	/**
	 * Sets the resource persistence.
	 *
	 * @param resourcePersistence the resource persistence
	 */
	public void setResourcePersistence(ResourcePersistence resourcePersistence) {
		this.resourcePersistence = resourcePersistence;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		PersistedModelLocalServiceRegistryUtil.register("org.oep.exch.dao.hoso.model.ExchFileDinhKem",
			exchFileDinhKemLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"org.oep.exch.dao.hoso.model.ExchFileDinhKem");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	protected Class<?> getModelClass() {
		return ExchFileDinhKem.class;
	}

	protected String getModelClassName() {
		return ExchFileDinhKem.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = exchFileDinhKemPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = ExchFileDinhKemLocalService.class)
	protected ExchFileDinhKemLocalService exchFileDinhKemLocalService;
	@BeanReference(type = ExchFileDinhKemPersistence.class)
	protected ExchFileDinhKemPersistence exchFileDinhKemPersistence;
	@BeanReference(type = HoSoMotCuaLocalService.class)
	protected HoSoMotCuaLocalService hoSoMotCuaLocalService;
	@BeanReference(type = HoSoMotCuaPersistence.class)
	protected HoSoMotCuaPersistence hoSoMotCuaPersistence;
	@BeanReference(type = HoSoTrucTuyenLocalService.class)
	protected HoSoTrucTuyenLocalService hoSoTrucTuyenLocalService;
	@BeanReference(type = HoSoTrucTuyenPersistence.class)
	protected HoSoTrucTuyenPersistence hoSoTrucTuyenPersistence;
	@BeanReference(type = KetQuaHosoLocalService.class)
	protected KetQuaHosoLocalService ketQuaHosoLocalService;
	@BeanReference(type = KetQuaHosoPersistence.class)
	protected KetQuaHosoPersistence ketQuaHosoPersistence;
	@BeanReference(type = TrangThaiHosoLocalService.class)
	protected TrangThaiHosoLocalService trangThaiHosoLocalService;
	@BeanReference(type = TrangThaiHosoPersistence.class)
	protected TrangThaiHosoPersistence trangThaiHosoPersistence;
	@BeanReference(type = UpdateHoSoTrucTuyenLocalService.class)
	protected UpdateHoSoTrucTuyenLocalService updateHoSoTrucTuyenLocalService;
	@BeanReference(type = UpdateHoSoTrucTuyenPersistence.class)
	protected UpdateHoSoTrucTuyenPersistence updateHoSoTrucTuyenPersistence;
	@BeanReference(type = CounterLocalService.class)
	protected CounterLocalService counterLocalService;
	@BeanReference(type = ResourceLocalService.class)
	protected ResourceLocalService resourceLocalService;
	@BeanReference(type = ResourceService.class)
	protected ResourceService resourceService;
	@BeanReference(type = ResourcePersistence.class)
	protected ResourcePersistence resourcePersistence;
	@BeanReference(type = UserLocalService.class)
	protected UserLocalService userLocalService;
	@BeanReference(type = UserService.class)
	protected UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private static Log _log = LogFactoryUtil.getLog(ExchFileDinhKemLocalServiceBaseImpl.class);
	private String _beanIdentifier;
}